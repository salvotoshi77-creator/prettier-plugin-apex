name: Tests and Deployments

on:
  push:
  pull_request:
  schedule:
    - cron: "0 8 * * *"
  repository_dispatch:
    types: manual-test-run
  workflow_dispatch:

jobs:
  functional-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # We are supporting NodeJS 14, however there is a bug with Jest Runner
        # that prevents us from running tests on NodeJS 14, see:
        # https://github.com/facebook/jest/issues/11814
        node:
          - "19"
          - "18"
          - "16"
        java:
          - "17"
          - "11"
        include:
          - node: "18"
            java: "11"
            ENABLE_CODE_COVERAGE: true
            ENABLE_INTEGRATION_TESTS: true
            ENABLE_DEPLOYMENT: true
          - node: "18"
            java: "17"
            ENABLE_PACKAGE_TESTS: true
    env:
      ENABLE_CODE_COVERAGE: ${{ matrix.ENABLE_CODE_COVERAGE }}
      RUN_INTEGRATION_TESTS: ${{ matrix.ENABLE_INTEGRATION_TESTS && (github.event_name == 'schedule' || github.event_name == 'repository_dispatch' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags')) }}
      RUN_PACKAGE_TESTS: ${{ matrix.ENABLE_PACKAGE_TESTS && (github.event_name == 'schedule' || github.event_name == 'repository_dispatch' || github.event_name == 'workflow_dispatch') }}
      RUN_DEPLOYMENT: ${{ matrix.ENABLE_DEPLOYMENT && startsWith(github.ref, 'refs/tags') }}
    name: Run tests on NodeJS ${{ matrix.node }} and Java ${{ matrix.java }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3.5.1
        with:
          node-version: ${{ matrix.node }}

      - uses: actions/setup-java@v3
        with:
          distribution: "adopt"
          java-version: ${{ matrix.java }}

      # Starting with Node 17, DNS is resolved by order that the resolver
      # returns it. In Github Actions environment, there is a loopback IP
      # for ::1 to localhost, which means our tests try to connect to the ipv6
      # interface, which the Java program does not listen on.
      - name: Remove ipv6 loopback
        run: sudo sed -Ei '/(^::1)/d' /etc/hosts

      - name: Install dependencies
        run: yarn install

      - name: Run Apex parsing server
        run: nohup yarn run start-server &

      - name: Wait for Apex parsing server to be up
        run: yarn run wait-server

      - name: Run functional tests
        run: AST_COMPARE=true yarn test -c jest.config.standalone.js

      - name: Upload code coverage
        if: matrix.ENABLE_CODE_COVERAGE
        uses: codecov/codecov-action@v3

      - name: Install integration test suite dependencies
        if: env.RUN_INTEGRATION_TESTS == 'true'
        run: sudo apt-get install -y -qq parallel

      - name: Run integration tests
        if: env.RUN_INTEGRATION_TESTS == 'true'
        run: ./tests_integration/format/run-integration-tests.sh

      - name: Run package tests
        if: env.RUN_PACKAGE_TESTS == 'true'
        run: ./tests_integration/package/run-package-tests.sh

      - name: Deploy to NPM
        if: env.RUN_DEPLOYMENT == 'true'
        uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.NPM_TOKEN }}

      - name: Create Release
        if: env.RUN_DEPLOYMENT == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}

      - name: Stop Apex parsing server
        if: ${{ always() }}
        run: yarn run stop-server
        env:
          # Workaround for this bug from npm-publish Github Action:
          # https://github.com/JS-DevTools/npm-publish/issues/15
          # That Action leaves some placeholder (INPUT_TOKEN) in the .npmrc file
          # which needs to filled in by _something_, otherwise `yarn` fails
          INPUT_TOKEN: ''
